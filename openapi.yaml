openapi: 3.0.0
info:
  title: Library Management System API
  description: |
    A distributed library management system with Frontend and Admin APIs.
    
    The system consists of two independent microservices:
    1. Frontend API - For user-facing operations
    2. Admin API - For administrative operations
  version: 1.0.0
  contact:
    name: Library Management Team
    email: support@library.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Frontend API Development Server
  - url: http://localhost:8001/api/v1
    description: Admin API Development Server

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "The Great Gatsby"
        author:
          type: string
          example: "F. Scott Fitzgerald"
        isbn:
          type: string
          example: "978-0743273565"
        publisher:
          type: string
          enum: [PENGUIN, HARPER_COLLINS, SIMON_SCHUSTER]
          example: "PENGUIN"
        category:
          type: string
          enum: [FICTION, NON_FICTION, SCIENCE, TECHNOLOGY]
          example: "FICTION"
        available:
          type: boolean
          example: true
        return_date:
          type: string
          format: date-time
          nullable: true
          example: null
    
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        created_at:
          type: string
          format: date-time
          example: "2025-02-20T11:37:14"
    
    BorrowRecord:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        book_id:
          type: integer
          example: 1
        borrow_date:
          type: string
          format: date
          example: "2025-02-20"
        return_date:
          type: string
          format: date
          example: "2025-03-06"
        returned:
          type: boolean
          example: false
    
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Error message explaining what went wrong"

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    BadRequest:
      description: The request contains invalid parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

paths:
  /books:
    get:
      summary: List all books
      description: |
        Retrieve a paginated list of books with optional filtering.
        
        You can filter books by:
        * Publisher (e.g., PENGUIN, HARPER_COLLINS)
        * Category (e.g., FICTION, NON_FICTION)
        * Availability status
      parameters:
        - name: skip
          in: query
          description: Number of books to skip (for pagination)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Maximum number of books to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: publisher
          in: query
          description: Filter books by publisher
          schema:
            type: string
            enum: [PENGUIN, HARPER_COLLINS, SIMON_SCHUSTER]
        - name: category
          in: query
          description: Filter books by category
          schema:
            type: string
            enum: [FICTION, NON_FICTION, SCIENCE, TECHNOLOGY]
        - name: available_only
          in: query
          description: Only show books that are currently available
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of books matching the filter criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  
  /books/{book_id}:
    get:
      summary: Get a specific book
      description: |
        Retrieve detailed information about a specific book by its ID.
        
        The response includes:
        * Book details (title, author, ISBN)
        * Current availability status
        * Expected return date (if borrowed)
        * Publisher and category information
      parameters:
        - name: book_id
          in: path
          required: true
          description: ID of the book to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Detailed book information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        '404':
          $ref: "#/components/responses/NotFound"
  
  /users:
    post:
      summary: Create a new user
      description: |
        Create a new user account in the library system.
        
        The email address must be unique in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - firstname
                - lastname
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                firstname:
                  type: string
                  example: "John"
                lastname:
                  type: string
                  example: "Doe"
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /borrow/{user_id}/borrow/{book_id}:
    post:
      summary: Borrow a book
      description: |
        Borrow a book for a specific user for a specified number of days.
        
        This endpoint will:
        * Check if the book exists and is available
        * Create a borrow record with the specified duration
        * Update the book's availability status
        * Set a return date based on the specified number of days
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user borrowing the book
          schema:
            type: integer
        - name: book_id
          in: path
          required: true
          description: ID of the book to borrow
          schema:
            type: integer
        - name: days
          in: query
          required: true
          description: Number of days to borrow the book
          schema:
            type: integer
            minimum: 1
            maximum: 30
            example: 14
      responses:
        '200':
          description: Successfully borrowed the book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BorrowRecord"
        '400':
          description: Book is not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Book is not available. Will be available after 2025-03-06"
        '404':
          $ref: "#/components/responses/NotFound"
  
  /health:
    get:
      summary: Check service health
      description: |
        Check the health status of the service.
        
        This endpoint verifies:
        * Database connection
        * Redis connection
        * Service uptime
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                    example: "healthy"
                  database:
                    type: string
                    enum: [connected]
                    example: "connected"
                  redis:
                    type: string
                    enum: [connected]
                    example: "connected"
                  uptime:
                    type: string
                    example: "2d 3h 45m"
